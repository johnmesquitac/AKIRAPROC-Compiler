int vet[4];

int minloc ( int a[], int low, int high )
{	int i; int x; int k;
	k = low;
	x = a[low];
	i = low + 1;
	while (i < high){
		if (a[i] < x){
			x = a[i];
			k = i;
		}
		i = i + 1;
	}
	return k;
}

void sort( int a[], int low, int high)
{	int i; int k;
	i = low;
	while (i < high-1){
		int t;
		k = minloc(a,i,high);
		t = a[k];
		a[k] = a[i];
		a[i] = t;
		i = i + 1;
	}
}

int gcd (int u, int v)
{       
	if (v == 0) return u ;
	else return gcd(v,u-u/v*v);
	/* u-u/v*v == u mod v */
}

int fatorial (int n){       
    if (n < 2) return 1;
    else return fatorial(n-1)*n;
}

int fibonacci(int n){
    int a; int b; int c; int i;
    if (n <= 0) return 0;
    else if (n == 1) return 1;
    else {
        a = 0; 
        b = 1;
	i = 1;  
        while (i < n){
            c = b;
            b = b + a;
            a = c;
            i = i + 1;
        }
        return b;
    }
}

int calculadora(int a, int b, int op){
    if (op == 1) return a+b;
    else if (op == 2) return a-b;
    else if (op == 3) return a*b;
    else if (op == 4) return a/b;
    else if (op == 5) return a-a/b*b; /* mod(a,b) */
}

int mediaVector(int vec[], int size){
    int i; int total;
    i = 0; total = 0;
    while(i < size){
        total = total + vec[i];
        i = i + 1;        
    }
    return total/size;
}

int parimpar(int x)
{
	if ((x-x/2*2)==0)
		return 1;
	else
		return 0;
}

int somavetor(int vec[], int vecaux[], int size)
{
	int i;
    i=0;
	while(i<size)
	{
		vec[i] = vec[i]+vecaux[i] ;
		i = i+1;
	}
}

int outputvec(int vec[], int size)
{
	int i;
    i=0;
	while(i<size)
	{
		output(vec[i]);
		i=i+1;
	}
}

int inputvector(int vec[],int size)
{
    int i;
    i=0;
    while(i<size){
        vec[i] = input();
        i = i+1;
    }
}

int varianciaVector(int vec[], int size){
    int i; int total; int media; int aux;
    i = 0; total = 0;
    media = mediaVector(vec,size);
    while(i < size){
        aux = vec[i] - media;
        total = total + (aux*aux);
        i = i + 1;        
    }
    return total/size;
}

int menor (int u, int v)
{
    if (u <= v)
    {
        return u;
    }
    else
    {
        return v;
    }
}

int maior (int u, int v)
{
    if (u > v)
    {
        return u;
    }
    else
    {
        return v;
    }
}

void main (void)
{
    int type;
    int x; int y; int i; int z;
    
    type = input();
    while(type>0)
    {
        if(type==1){ /*gcd*/
            	x = input(); y = input();
	            output(gcd(x,y));
        }
        else if (type==2){ /*selectionsort*/
        		i=0;
           		while (i < 4){
		    		vet[i] = input();
		    		i = i + 1;
	    		}
	    		sort(vet,0,4);
	   			i = 0;
	    		while (i < 4){
					output(vet[i]);
					i = i + 1;
	    		}	    		
    	}
			else if(type==3) /*fatorial*/
			{
				x = input();
				output(fatorial(x));
			}
				else if(type==4) /*fibonacci*/
				{
					x = input();
					output(fibonacci(x));
				}
					else if(type==5) /*maior*/
					{
                        x= input();
                        y= input();
                        output(maior(x,y));
					}
						else if(type==6) /*calculadora*/
						{
							x = input();
							y= input();
							z= input();
							output(calculadora(x,y,z));
						}
							else if(type==7)  /*mediaVector*/
							{
								i=0;
           		                while (i < 4){
		    		                 vet[i] = input();
		    		                 i = i + 1;
	    		                }
								output(mediaVector(vet,4));
							}
								else if(type==8) /*par ou impar*/
								{
									x=input();
									output(parimpar(x));
								}
									else if(type==9) /*menor*/
									{
										x= input();
                                        y= input();
                                        output(menor(x,y));
									}
									else if(type==10) 
									{
										i=0;
           		                        while (i < 4){
		    		                     vet[i] = input();
		    		                    i = i + 1;
	    		                        }
                                        output(varianciaVector(vet,4));
									}
					}

     type = input();
    }
